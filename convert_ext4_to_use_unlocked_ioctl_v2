Convert ext4 to use unlocked_ioctl v2

From: Andi Kleen <ak@suse.de>

I checked ext4_ioctl and it looked largely safe to not be used
without BKL.  So convert it over to unlocked_ioctl.

v1->v2: drop BKL for online grow. resize.c seems to do enough locking

Signed-off-by: Andi Kleen <ak@suse.de>
Signed-off-by: Theodore Ts'o <tytso@mit.edu>

---
 fs/ext4/dir.c           |    2 +-
 fs/ext4/file.c          |    2 +-
 fs/ext4/ioctl.c         |   12 +++---------
 include/linux/ext4_fs.h |    3 +--
 4 files changed, 6 insertions(+), 13 deletions(-)

Index: linux-2.6.25-rc9/fs/ext4/dir.c
===================================================================
--- linux-2.6.25-rc9.orig/fs/ext4/dir.c	2008-04-14 10:23:27.000000000 -0700
+++ linux-2.6.25-rc9/fs/ext4/dir.c	2008-04-14 10:24:58.000000000 -0700
@@ -42,7 +42,7 @@ const struct file_operations ext4_dir_op
 	.llseek		= generic_file_llseek,
 	.read		= generic_read_dir,
 	.readdir	= ext4_readdir,		/* we take BKL. needed?*/
-	.ioctl		= ext4_ioctl,		/* BKL held */
+	.unlocked_ioctl = ext4_ioctl,
 #ifdef CONFIG_COMPAT
 	.compat_ioctl	= ext4_compat_ioctl,
 #endif
Index: linux-2.6.25-rc9/fs/ext4/file.c
===================================================================
--- linux-2.6.25-rc9.orig/fs/ext4/file.c	2008-04-14 10:23:27.000000000 -0700
+++ linux-2.6.25-rc9/fs/ext4/file.c	2008-04-14 10:24:58.000000000 -0700
@@ -129,7 +129,7 @@ const struct file_operations ext4_file_o
 	.write		= do_sync_write,
 	.aio_read	= generic_file_aio_read,
 	.aio_write	= ext4_file_write,
-	.ioctl		= ext4_ioctl,
+	.unlocked_ioctl = ext4_ioctl,
 #ifdef CONFIG_COMPAT
 	.compat_ioctl	= ext4_compat_ioctl,
 #endif
Index: linux-2.6.25-rc9/fs/ext4/ioctl.c
===================================================================
--- linux-2.6.25-rc9.orig/fs/ext4/ioctl.c	2008-04-14 10:23:27.000000000 -0700
+++ linux-2.6.25-rc9/fs/ext4/ioctl.c	2008-04-14 10:24:58.000000000 -0700
@@ -17,9 +17,9 @@
 #include <linux/smp_lock.h>
 #include <asm/uaccess.h>
 
-int ext4_ioctl (struct inode * inode, struct file * filp, unsigned int cmd,
-		unsigned long arg)
+long ext4_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
 {
+	struct inode *inode = filp->f_dentry->d_inode;
 	struct ext4_inode_info *ei = EXT4_I(inode);
 	unsigned int flags;
 	unsigned short rsv_window_size;
@@ -265,9 +265,6 @@ flags_err:
 #ifdef CONFIG_COMPAT
 long ext4_compat_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 {
-	struct inode *inode = file->f_path.dentry->d_inode;
-	int ret;
-
 	/* These are just misnamed, they actually get/put from/to user an int */
 	switch (cmd) {
 	case EXT4_IOC32_GETFLAGS:
@@ -307,9 +304,6 @@ long ext4_compat_ioctl(struct file *file
 	default:
 		return -ENOIOCTLCMD;
 	}
-	lock_kernel();
-	ret = ext4_ioctl(inode, file, cmd, (unsigned long) compat_ptr(arg));
-	unlock_kernel();
-	return ret;
+	return ext4_ioctl(file, cmd, (unsigned long) compat_ptr(arg));
 }
 #endif
Index: linux-2.6.25-rc9/include/linux/ext4_fs.h
===================================================================
--- linux-2.6.25-rc9.orig/include/linux/ext4_fs.h	2008-04-14 10:24:56.000000000 -0700
+++ linux-2.6.25-rc9/include/linux/ext4_fs.h	2008-04-14 10:24:58.000000000 -0700
@@ -1062,8 +1062,7 @@ extern int ext4_block_truncate_page(hand
 		struct address_space *mapping, loff_t from);
 
 /* ioctl.c */
-extern int ext4_ioctl (struct inode *, struct file *, unsigned int,
-		       unsigned long);
+extern long ext4_ioctl(struct file *, unsigned int, unsigned long);
 extern long ext4_compat_ioctl (struct file *, unsigned int, unsigned long);
 
 /* migrate.c */
