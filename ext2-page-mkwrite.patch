ext2: Use page_mkwrite vma_operations to get mmap write notification.

From: Aneesh Kumar K.V <aneesh.kumar@linux.vnet.ibm.com>

We would like to get notified when we are doing a write on mmap
section.  The changes are needed to handle ENOSPC when writing to an
mmap section of files with holes.

Signed-off-by: Aneesh Kumar K.V <aneesh.kumar@linux.vnet.ibm.com>
Signed-off-by: Mingming Cao <cmm@us.ibm.com>
---

 fs/ext2/ext2.h  |    1 +
 fs/ext2/file.c  |   21 ++++++++++++++++++++-
 fs/ext2/inode.c |    5 +++++
 3 files changed, 26 insertions(+), 1 deletions(-)


Index: linux-2.6.26-rc5/fs/ext2/ext2.h
===================================================================
--- linux-2.6.26-rc5.orig/fs/ext2/ext2.h	2008-06-04 20:10:44.000000000 -0700
+++ linux-2.6.26-rc5/fs/ext2/ext2.h	2008-06-09 12:18:54.000000000 -0700
@@ -136,6 +136,7 @@ extern void ext2_get_inode_flags(struct 
 int __ext2_write_begin(struct file *file, struct address_space *mapping,
 		loff_t pos, unsigned len, unsigned flags,
 		struct page **pagep, void **fsdata);
+extern int ext2_page_mkwrite(struct vm_area_struct *vma, struct page *page);
 
 /* ioctl.c */
 extern long ext2_ioctl(struct file *, unsigned int, unsigned long);
Index: linux-2.6.26-rc5/fs/ext2/file.c
===================================================================
--- linux-2.6.26-rc5.orig/fs/ext2/file.c	2008-06-04 20:10:44.000000000 -0700
+++ linux-2.6.26-rc5/fs/ext2/file.c	2008-06-09 12:18:54.000000000 -0700
@@ -18,6 +18,7 @@
  * 	(jj@sunsite.ms.mff.cuni.cz)
  */
 
+#include <linux/mm.h>
 #include <linux/time.h>
 #include "ext2.h"
 #include "xattr.h"
@@ -38,6 +39,24 @@ static int ext2_release_file (struct ino
 	return 0;
 }
 
+static struct vm_operations_struct ext2_file_vm_ops = {
+	.fault		= filemap_fault,
+	.page_mkwrite   = ext2_page_mkwrite,
+};
+
+static int ext2_file_mmap(struct file *file, struct vm_area_struct *vma)
+{
+	struct address_space *mapping = file->f_mapping;
+
+	if (!mapping->a_ops->readpage)
+		return -ENOEXEC;
+	file_accessed(file);
+	vma->vm_ops = &ext2_file_vm_ops;
+	vma->vm_flags |= VM_CAN_NONLINEAR;
+	return 0;
+}
+
+
 /*
  * We have mostly NULL's here: the current defaults are ok for
  * the ext2 filesystem.
@@ -52,7 +71,7 @@ const struct file_operations ext2_file_o
 #ifdef CONFIG_COMPAT
 	.compat_ioctl	= ext2_compat_ioctl,
 #endif
-	.mmap		= generic_file_mmap,
+	.mmap		= ext2_file_mmap,
 	.open		= generic_file_open,
 	.release	= ext2_release_file,
 	.fsync		= ext2_sync_file,
Index: linux-2.6.26-rc5/fs/ext2/inode.c
===================================================================
--- linux-2.6.26-rc5.orig/fs/ext2/inode.c	2008-06-04 20:10:44.000000000 -0700
+++ linux-2.6.26-rc5/fs/ext2/inode.c	2008-06-09 12:18:54.000000000 -0700
@@ -1443,3 +1443,8 @@ int ext2_setattr(struct dentry *dentry, 
 		error = ext2_acl_chmod(inode);
 	return error;
 }
+
+int ext2_page_mkwrite(struct vm_area_struct *vma, struct page *page)
+{
+	return block_page_mkwrite(vma, page, ext2_get_block);
+}
