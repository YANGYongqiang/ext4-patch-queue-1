Introduce ext4_find_next_bit

From: Aneesh Kumar K.V <aneesh.kumar@linux.vnet.ibm.com>

This gets used by the ext4 multi block allocator patches.

Also add generic_find_next_le_bit

Signed-off-by: Aneesh Kumar K.V <aneesh.kumar@linux.vnet.ibm.com>
Cc: <linux-ext4@vger.kernel.org>
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
---

 include/asm-generic/bitops/ext2-non-atomic.h |    2 +
 include/asm-generic/bitops/le.h              |    4 ++
 include/asm-powerpc/bitops.h                 |    4 ++
 include/linux/ext4_fs.h                      |    1 
 lib/find_next_bit.c                          |   44 +++++++++++++++++++++++++++
 5 files changed, 55 insertions(+)


Index: linux-2.6.24-rc3/include/asm-generic/bitops/ext2-non-atomic.h
===================================================================
--- linux-2.6.24-rc3.orig/include/asm-generic/bitops/ext2-non-atomic.h	2007-11-26 14:45:20.000000000 -0800
+++ linux-2.6.24-rc3/include/asm-generic/bitops/ext2-non-atomic.h	2007-11-26 14:47:22.000000000 -0800
@@ -14,5 +14,7 @@
 	generic_find_first_zero_le_bit((unsigned long *)(addr), (size))
 #define ext2_find_next_zero_bit(addr, size, off) \
 	generic_find_next_zero_le_bit((unsigned long *)(addr), (size), (off))
+#define ext2_find_next_bit(addr, size, off) \
+	generic_find_next_le_bit((unsigned long *)(addr), (size), (off))
 
 #endif /* _ASM_GENERIC_BITOPS_EXT2_NON_ATOMIC_H_ */
Index: linux-2.6.24-rc3/include/asm-generic/bitops/le.h
===================================================================
--- linux-2.6.24-rc3.orig/include/asm-generic/bitops/le.h	2007-11-26 14:45:20.000000000 -0800
+++ linux-2.6.24-rc3/include/asm-generic/bitops/le.h	2007-11-26 14:47:22.000000000 -0800
@@ -20,6 +20,8 @@
 #define generic___test_and_clear_le_bit(nr, addr) __test_and_clear_bit(nr, addr)
 
 #define generic_find_next_zero_le_bit(addr, size, offset) find_next_zero_bit(addr, size, offset)
+#define generic_find_next_le_bit(addr, size, offset) \
+			find_next_bit(addr, size, offset)
 
 #elif defined(__BIG_ENDIAN)
 
@@ -42,6 +44,8 @@
 
 extern unsigned long generic_find_next_zero_le_bit(const unsigned long *addr,
 		unsigned long size, unsigned long offset);
+extern unsigned long generic_find_next_le_bit(const unsigned long *addr,
+		unsigned long size, unsigned long offset);
 
 #else
 #error "Please fix <asm/byteorder.h>"
Index: linux-2.6.24-rc3/include/asm-powerpc/bitops.h
===================================================================
--- linux-2.6.24-rc3.orig/include/asm-powerpc/bitops.h	2007-11-26 14:45:20.000000000 -0800
+++ linux-2.6.24-rc3/include/asm-powerpc/bitops.h	2007-11-26 14:47:22.000000000 -0800
@@ -359,6 +359,8 @@ static __inline__ int test_le_bit(unsign
 unsigned long generic_find_next_zero_le_bit(const unsigned long *addr,
 				    unsigned long size, unsigned long offset);
 
+unsigned long generic_find_next_le_bit(const unsigned long *addr,
+				    unsigned long size, unsigned long offset);
 /* Bitmap functions for the ext2 filesystem */
 
 #define ext2_set_bit(nr,addr) \
@@ -378,6 +380,8 @@ unsigned long generic_find_next_zero_le_
 #define ext2_find_next_zero_bit(addr, size, off) \
 	generic_find_next_zero_le_bit((unsigned long*)addr, size, off)
 
+#define ext2_find_next_bit(addr, size, off) \
+	generic_find_next_le_bit((unsigned long *)addr, size, off)
 /* Bitmap functions for the minix filesystem.  */
 
 #define minix_test_and_set_bit(nr,addr) \
Index: linux-2.6.24-rc3/include/linux/ext4_fs.h
===================================================================
--- linux-2.6.24-rc3.orig/include/linux/ext4_fs.h	2007-11-26 14:47:16.000000000 -0800
+++ linux-2.6.24-rc3/include/linux/ext4_fs.h	2007-11-26 14:47:22.000000000 -0800
@@ -494,6 +494,7 @@ do {									       \
 #define ext4_test_bit			ext2_test_bit
 #define ext4_find_first_zero_bit	ext2_find_first_zero_bit
 #define ext4_find_next_zero_bit		ext2_find_next_zero_bit
+#define ext4_find_next_bit		ext2_find_next_bit
 
 /*
  * Maximal mount counts between two filesystem checks
Index: linux-2.6.24-rc3/lib/find_next_bit.c
===================================================================
--- linux-2.6.24-rc3.orig/lib/find_next_bit.c	2007-11-26 14:45:20.000000000 -0800
+++ linux-2.6.24-rc3/lib/find_next_bit.c	2007-11-26 14:47:22.000000000 -0800
@@ -178,4 +178,48 @@ found_middle_swap:
 
 EXPORT_SYMBOL(generic_find_next_zero_le_bit);
 
+unsigned long generic_find_next_le_bit(const unsigned long *addr, unsigned
+		long size, unsigned long offset)
+{
+	const unsigned long *p = addr + BITOP_WORD(offset);
+	unsigned long result = offset & ~(BITS_PER_LONG - 1);
+	unsigned long tmp;
+
+	if (offset >= size)
+		return size;
+	size -= result;
+	offset &= (BITS_PER_LONG - 1UL);
+	if (offset) {
+		tmp = ext2_swabp(p++);
+		tmp &= (~0UL << offset);
+		if (size < BITS_PER_LONG)
+			goto found_first;
+		if (tmp)
+			goto found_middle;
+		size -= BITS_PER_LONG;
+		result += BITS_PER_LONG;
+	}
+
+	while (size & ~(BITS_PER_LONG - 1)) {
+		tmp = *(p++);
+		if (tmp)
+			goto found_middle_swap;
+		result += BITS_PER_LONG;
+		size -= BITS_PER_LONG;
+	}
+	if (!size)
+		return result;
+	tmp = ext2_swabp(p);
+found_first:
+	tmp &= (~0UL >> (BITS_PER_LONG - size));
+	if (tmp == 0UL)		/* Are any bits set? */
+		return result + size; /* Nope. */
+found_middle:
+	return result + __ffs(tmp);
+
+found_middle_swap:
+	return result + __ffs(ext2_swab(tmp));
+}
+EXPORT_SYMBOL(generic_find_next_le_bit);
+
 #endif /* __BIG_ENDIAN */
