Subject: [RFC] [patch 2/3] i_version update for ext4: ext4 specific code

From: Cordenner jean noel <jean-noel.cordenner@bull.net>

This part of the patch contains the definition of the on-disk i_version
field and its update

Signed-off-by: Jean Noel Cordenner <jean-noel.cordenner@bull.net>
---

 fs/ext4/ialloc.c        |    1 +
 fs/ext4/inode.c         |    4 ++++
 fs/ext4/ioctl.c         |    2 ++
 fs/ext4/namei.c         |    7 +++++++
 fs/ext4/super.c         |    2 +-
 fs/ext4/xattr.c         |    1 +
 include/linux/ext4_fs.h |    4 ++--
 7 files changed, 18 insertions(+), 3 deletions(-)

diff --git a/fs/ext4/ialloc.c b/fs/ext4/ialloc.c
index c88b439..a5fe729 100644
--- a/fs/ext4/ialloc.c
+++ b/fs/ext4/ialloc.c
@@ -564,6 +564,7 @@ got:
 	/* This is the optimal IO size (for stat), not the fs block size */
 	inode->i_blocks = 0;
 	inode->i_mtime = inode->i_atime = inode->i_ctime = CURRENT_TIME_SEC;
+       inode->i_version = 1;
 
 	memset(ei->i_data, 0, sizeof(ei->i_data));
 	ei->i_dir_start_lookup = 0;
diff --git a/fs/ext4/inode.c b/fs/ext4/inode.c
index 71fe60d..d66c3a4 100644
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -728,6 +728,7 @@ static int ext4_splice_branch(handle_t *handle, struct inode *inode,
 	/* We are done with atomic stuff, now do the rest of housekeeping */
 
 	inode->i_ctime = CURRENT_TIME_SEC;
+       inode->i_version++;
 	ext4_mark_inode_dirty(handle, inode);
 
 	/* had we spliced it onto indirect block? */
@@ -2472,6 +2473,7 @@ do_indirects:
 
 	mutex_unlock(&ei->truncate_mutex);
 	inode->i_mtime = inode->i_ctime = CURRENT_TIME_SEC;
+       inode->i_version++;
 	ext4_mark_inode_dirty(handle, inode);
 
 	/*
@@ -2710,6 +2712,7 @@ void ext4_read_inode(struct inode * inode)
 	inode->i_ctime.tv_sec = le32_to_cpu(raw_inode->i_ctime);
 	inode->i_mtime.tv_sec = le32_to_cpu(raw_inode->i_mtime);
 	inode->i_atime.tv_nsec = inode->i_ctime.tv_nsec = inode->i_mtime.tv_nsec = 0;
+       inode->i_version = le32_to_cpu(raw_inode->ext4_i_version);
 
 	ei->i_state = 0;
 	ei->i_dir_start_lookup = 0;
@@ -2868,6 +2871,7 @@ static int ext4_do_update_inode(handle_t *handle,
 	raw_inode->i_atime = cpu_to_le32(inode->i_atime.tv_sec);
 	raw_inode->i_ctime = cpu_to_le32(inode->i_ctime.tv_sec);
 	raw_inode->i_mtime = cpu_to_le32(inode->i_mtime.tv_sec);
+       raw_inode->ext4_i_version = cpu_to_le32(inode->i_version);
 	raw_inode->i_blocks = cpu_to_le32(inode->i_blocks);
 	raw_inode->i_dtime = cpu_to_le32(ei->i_dtime);
 	raw_inode->i_flags = cpu_to_le32(ei->i_flags);
diff --git a/fs/ext4/ioctl.c b/fs/ext4/ioctl.c
index 4914d0e..44c4f6c 100644
--- a/fs/ext4/ioctl.c
+++ b/fs/ext4/ioctl.c
@@ -98,6 +98,7 @@ int ext4_ioctl (struct inode * inode, struct file * filp, unsigned int cmd,
 
 		ext4_set_inode_flags(inode);
 		inode->i_ctime = CURRENT_TIME_SEC;
+               inode->i_version++;
 
 		err = ext4_mark_iloc_dirty(handle, inode, &iloc);
 flags_err:
@@ -135,6 +136,7 @@ flags_err:
 		err = ext4_reserve_inode_write(handle, inode, &iloc);
 		if (err == 0) {
 			inode->i_ctime = CURRENT_TIME_SEC;
+                       inode->i_version++;
 			inode->i_generation = generation;
 			err = ext4_mark_iloc_dirty(handle, inode, &iloc);
 		}
diff --git a/fs/ext4/namei.c b/fs/ext4/namei.c
index e5a74a5..ac865f8 100644
--- a/fs/ext4/namei.c
+++ b/fs/ext4/namei.c
@@ -2059,6 +2059,7 @@ static int ext4_rmdir (struct inode * dir, struct dentry *dentry)
 	inode->i_size = 0;
 	ext4_orphan_add(handle, inode);
 	inode->i_ctime = dir->i_ctime = dir->i_mtime = CURRENT_TIME_SEC;
+       inode->i_version++;
 	ext4_mark_inode_dirty(handle, inode);
 	drop_nlink(dir);
 	ext4_update_dx_flag(dir);
@@ -2109,12 +2110,14 @@ static int ext4_unlink(struct inode * dir, struct dentry *dentry)
 	if (retval)
 		goto end_unlink;
 	dir->i_ctime = dir->i_mtime = CURRENT_TIME_SEC;
+       dir->i_version++;
 	ext4_update_dx_flag(dir);
 	ext4_mark_inode_dirty(handle, dir);
 	drop_nlink(inode);
 	if (!inode->i_nlink)
 		ext4_orphan_add(handle, inode);
 	inode->i_ctime = dir->i_ctime;
+       inode->i_version++;
 	ext4_mark_inode_dirty(handle, inode);
 	retval = 0;
 
@@ -2200,6 +2203,7 @@ retry:
 		handle->h_sync = 1;
 
 	inode->i_ctime = CURRENT_TIME_SEC;
+       inode->i_version++;
 	ext4_inc_count(handle, inode);
 	atomic_inc(&inode->i_count);
 
@@ -2302,6 +2306,7 @@ static int ext4_rename (struct inode * old_dir, struct dentry *old_dentry,
 	 * rename.
 	 */
 	old_inode->i_ctime = CURRENT_TIME_SEC;
+       old_inode->i_version++;
 	ext4_mark_inode_dirty(handle, old_inode);
 
 	/*
@@ -2335,8 +2340,10 @@ static int ext4_rename (struct inode * old_dir, struct dentry *old_dentry,
 	if (new_inode) {
 		drop_nlink(new_inode);
 		new_inode->i_ctime = CURRENT_TIME_SEC;
+               new_inode->i_version++;
 	}
 	old_dir->i_ctime = old_dir->i_mtime = CURRENT_TIME_SEC;
+       old_dir->i_version++;
 	ext4_update_dx_flag(old_dir);
 	if (dir_bh) {
 		BUFFER_TRACE(dir_bh, "get_write_access");
diff --git a/fs/ext4/super.c b/fs/ext4/super.c
index 84ef0b9..0dffe91 100644
--- a/fs/ext4/super.c
+++ b/fs/ext4/super.c
@@ -2799,8 +2799,8 @@ out:
 		i_size_write(inode, off+len-towrite);
 		EXT4_I(inode)->i_disksize = inode->i_size;
 	}
-	inode->i_version++;
 	inode->i_mtime = inode->i_ctime = CURRENT_TIME;
+       inode->i_version = 1;
 	ext4_mark_inode_dirty(handle, inode);
 	mutex_unlock(&inode->i_mutex);
 	return len - towrite;
diff --git a/fs/ext4/xattr.c b/fs/ext4/xattr.c
index dc969c3..58c9632 100644
--- a/fs/ext4/xattr.c
+++ b/fs/ext4/xattr.c
@@ -1005,6 +1005,7 @@ ext4_xattr_set_handle(handle_t *handle, struct inode *inode, int name_index,
 	if (!error) {
 		ext4_xattr_update_super_block(handle, inode->i_sb);
 		inode->i_ctime = CURRENT_TIME_SEC;
+               inode->i_version++;
 		error = ext4_mark_iloc_dirty(handle, inode, &is.iloc);
 		/*
 		 * The bh is consumed by ext4_mark_iloc_dirty, even with
diff --git a/include/linux/ext4_fs.h b/include/linux/ext4_fs.h
index 0f60034..a52f35d 100644
--- a/include/linux/ext4_fs.h
+++ b/include/linux/ext4_fs.h
@@ -305,7 +305,7 @@ struct ext4_inode {
 	__le32	i_flags;	/* File flags */
 	union {
 		struct {
-			__u32  l_i_reserved1;
+                       __u32  l_i_version;
 		} linux1;
 		struct {
 			__u32  h_i_translator;
@@ -350,7 +350,7 @@ struct ext4_inode {
 #define i_size_high	i_dir_acl
 
 #if defined(__KERNEL__) || defined(__linux__)
-#define i_reserved1	osd1.linux1.l_i_reserved1
+#define ext4_i_version  osd1.linux1.l_i_version
 #define i_frag		osd2.linux2.l_i_frag
 #define i_fsize		osd2.linux2.l_i_fsize
 #define i_file_acl_high	osd2.linux2.l_i_file_acl_high
