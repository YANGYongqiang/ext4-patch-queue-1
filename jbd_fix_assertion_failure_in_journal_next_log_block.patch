jbd: fix assertion failure in journal_next_log_block
From: Josef Bacik <jbacik@redhat.com>

Fix assertion failure in journal_next_log_block

The way jbd tries to determine if there is enough space left on the journal in
order to start a new transaction is looking at the space left in the journal and
the space needed for the committing transaction, which is 1/4 of the journal +
the number of t_outstanding_credits for that transaction.  In this case its
assumed that t_outstanding_credits accurately represents the number of credits
waiting to be written to the journal, but this sometimes isn't the case.  The
transaction has two counters for buffers, t_outstanding_credits which is used in
conjunction with handles that are added to the transaction, and t_nr_buffers
which is only incremented/decremented when buffers are added/removed from the
transaction and are actually destined to be journaled.  Normally these two
counters are the same, however there are cases where the committing transaction
can have buffers moved to the next running transaction, for example any buffers
on the committing transactions t_reserved list would be moved to the next
(running) transaction, and if it had been dirtied in the process it would
immediately make it onto the t_updates list, which would increment t_nr_buffers
but not t_outstanding_credits.  So you get into this situation where
t_nr_buffers (the actual number of buffers that are on the transaction) is
greater than the number of buffers accounted for via t_outstanding_credits.
This presents a problem since as we loop through writting buffers to the
journal, we decrement t_outstanding_credits, and if t_nr_buffers is more than
t_outstanding_credits then we end up with a negative number for
t_outstanding_credits, which means we start saying we need less than 1/4 of the
journal for our committing transaction and allow more transactions than we can
handle to start, and then bam we fail because journal_next_log_block doesn't
have enough free blocks in order to handle the request.  This has been tested
and fixes the issue (which could not be reproduced by me but several other
people could get it to reproduce using postmark), and although I couldn't
reproduce the assertion, I could very easily reproduce the situation where
t_outstanding_credits was < than t_nr_buffers.


Signed-off-by: Josef Bacik <jbacik@redhat.com>
Signed-off-by: Mingming Cao <cmm@us.ibm.com>


---
 fs/jbd/commit.c      |    7 -------
 fs/jbd2/commit.c     |    9 +--------
 include/linux/jbd.h  |    3 +--
 include/linux/jbd2.h |    3 +--
 4 files changed, 3 insertions(+), 19 deletions(-)

Index: linux-2.6.24/fs/jbd/commit.c
===================================================================
--- linux-2.6.24.orig/fs/jbd/commit.c	2008-01-31 16:31:37.000000000 -0800
+++ linux-2.6.24/fs/jbd/commit.c	2008-01-31 16:33:21.000000000 -0800
@@ -559,13 +559,6 @@ void journal_commit_transaction(journal_
 			continue;
 		}
 
-		/*
-		 * start_this_handle() uses t_outstanding_credits to determine
-		 * the free space in the log, but this counter is changed
-		 * by journal_next_log_block() also.
-		 */
-		commit_transaction->t_outstanding_credits--;
-
 		/* Bump b_count to prevent truncate from stumbling over
                    the shadowed buffer!  @@@ This can go if we ever get
                    rid of the BJ_IO/BJ_Shadow pairing of buffers. */
Index: linux-2.6.24/fs/jbd2/commit.c
===================================================================
--- linux-2.6.24.orig/fs/jbd2/commit.c	2008-01-31 16:31:37.000000000 -0800
+++ linux-2.6.24/fs/jbd2/commit.c	2008-01-31 16:33:21.000000000 -0800
@@ -580,7 +580,7 @@ void jbd2_journal_commit_transaction(jou
 	stats.u.run.rs_logging = jiffies;
 	stats.u.run.rs_flushing = jbd2_time_diff(stats.u.run.rs_flushing,
 						 stats.u.run.rs_logging);
-	stats.u.run.rs_blocks = commit_transaction->t_outstanding_credits;
+	stats.u.run.rs_blocks = commit_transaction->t_nr_buffers;
 	stats.u.run.rs_blocks_logged = 0;
 
 	descriptor = NULL;
@@ -655,13 +655,6 @@ void jbd2_journal_commit_transaction(jou
 			continue;
 		}
 
-		/*
-		 * start_this_handle() uses t_outstanding_credits to determine
-		 * the free space in the log, but this counter is changed
-		 * by jbd2_journal_next_log_block() also.
-		 */
-		commit_transaction->t_outstanding_credits--;
-
 		/* Bump b_count to prevent truncate from stumbling over
                    the shadowed buffer!  @@@ This can go if we ever get
                    rid of the BJ_IO/BJ_Shadow pairing of buffers. */
Index: linux-2.6.24/include/linux/jbd.h
===================================================================
--- linux-2.6.24.orig/include/linux/jbd.h	2008-01-31 16:31:37.000000000 -0800
+++ linux-2.6.24/include/linux/jbd.h	2008-01-31 16:33:37.000000000 -0800
@@ -1055,8 +1055,7 @@ static inline int jbd_space_needed(journ
 {
 	int nblocks = journal->j_max_transaction_buffers;
 	if (journal->j_committing_transaction)
-		nblocks += journal->j_committing_transaction->
-					t_outstanding_credits;
+		nblocks += journal->j_committing_transaction->t_nr_buffers;
 	return nblocks;
 }
 
Index: linux-2.6.24/include/linux/jbd2.h
===================================================================
--- linux-2.6.24.orig/include/linux/jbd2.h	2008-01-31 16:31:37.000000000 -0800
+++ linux-2.6.24/include/linux/jbd2.h	2008-01-31 16:33:55.000000000 -0800
@@ -1167,8 +1167,7 @@ static inline int jbd_space_needed(journ
 {
 	int nblocks = journal->j_max_transaction_buffers;
 	if (journal->j_committing_transaction)
-		nblocks += journal->j_committing_transaction->
-					t_outstanding_credits;
+		nblocks += journal->j_committing_transaction->t_nr_buffers;
 	return nblocks;
 }
 
